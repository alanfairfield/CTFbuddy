import os
import argparse
import asyncio
import subprocess as sub
import xml.etree.ElementTree as ET 

def print_ascii_art():
    ascii_art = ('\033[92m' + r'''
+~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-+                                                                   
|     (                           )   )\ )                               |
|   ( )\      (      (         ( /(  (()/(     (                         |
|   )((_)    ))\    ))\   (    )\())  /(_))   ))\    (     (     (       |
|  ((_)_    /((_)  /((_)  )\  (_))/  (_))    /((_)   )\    )\    )\ )    |
|   / _ \  (_))(  (_))   ((_) | |_   | _ \  (_))    ((_)  ((_)  _(_/(    |
|  | (_) | | || | / -_)  (_-< |  _|  |   /  / -_)  / _|  / _ \ | ' \))   |
|   \__\_\  \_,_| \___|  /__/  \__|  |_|_\  \___|  \__|  \___/ |_||_|    |
|                                                                        |
+~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-+                                                                        
''' + '\033[92m') 

    print(ascii_art)
    print("\nThe quieter you become, the more you can hear.\n") # change color and add effects

# Add arguments
parser = argparse.ArgumentParser()
parser.add_argument('-t','--target', help = 'Specify the target IP address, CIDR range, or hostname') 
parser.add_argument('-H','--hosts', help = 'Specify the path to a file containing host(s) seperated by one or more spaces, tabs, or newlines') 
parser.add_argument('-o','--outfile', help = 'Specify the directory path to output the results. E.g., "~/Pentests/Client1/Target1"') 
args = parser.parse_args()

target = args.target
hosts = args.hosts
outfile = args.outfile


# First, we want to initiate an nmap scan and output the results of the scan to a file. 
# General Scan Syntax = sudo nmap -sS -sU -sV {target} -p-

def initial_scan():
    if args.target: # conditional based on argument given 
        sub.run([f"nmap {target} -p- -oX {outfile}_tcp"], shell=True) # parse XML output, but only save a standard -oN for the user
        sub.run([f"nmap {target} -p- -sU -oX {outfile}_udp"], shell=True)
    if args.hosts: # conditional based on argument given
        sub.run([f"nmap -iL {hosts} -p- -oX {outfile}_tcp"], shell=True)
        sub.run([f"nmap -iL {hosts} -p- -sU -oX {outfile}_udp"], shell=True)
        return None

def parse_output(): # Idea: parse results into a tuple- target = (ip_addr, [tcp_port1, tcp_port2, tcp_port3], [udp_port1, udp_port2, udp_port3])
    open_tcp = []
    open_udp = []





# For each (common) port that is open, we will want to move onto the next investigative step. E.g., if p21 FTP is open, test for anonymous login
# Same for p139/445 SMB

#def open_ports(found_ports): 
    '''take a quick scan approach first, scanning all ports, then run a more comprehensive scan on those found ports to save time using:
sudo nmap -sS -sU -sV {target} {found_ports}'''



def main():
    print_ascii_art()
    initial_scan()


if __name__ == "__main__":
    main()



