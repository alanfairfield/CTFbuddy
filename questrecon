import os
import argparse
import asyncio
import subprocess as sub
import xml.etree.ElementTree as ET 

def print_ascii_art():
    ascii_art = ('\033[92m' + r'''
+~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-+                                                                   
|     (                           )   )\ )                               |
|   ( )\      (      (         ( /(  (()/(     (                         |
|   )((_)    ))\    ))\   (    )\())  /(_))   ))\    (     (     (       |
|  ((_)_    /((_)  /((_)  )\  (_))/  (_))    /((_)   )\    )\    )\ )    |
|   / _ \  (_))(  (_))   ((_) | |_   | _ \  (_))    ((_)  ((_)  _(_/(    |
|  | (_) | | || | / -_)  (_-< |  _|  |   /  / -_)  / _|  / _ \ | ' \))   |
|   \__\_\  \_,_| \___|  /__/  \__|  |_|_\  \___|  \__|  \___/ |_||_|    |
|                                                                        |
+~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-+                                                                        
''' + '\033[92m') 

    print(ascii_art)
    print("\nThe quieter you become, the more you can hear.\n") # change color and add effects

# Add arguments
parser = argparse.ArgumentParser()
parser.add_argument('-t','--target', help = 'Specify the target IP address, CIDR range, or hostname') 
parser.add_argument('-H','--hosts', help = 'Specify the path to a file containing host(s) seperated by one or more spaces, tabs, or newlines') 
parser.add_argument('-o','--out', help = 'Specify the directory path to output the results. E.g., "~/Pentests/Client1"') 
args = parser.parse_args()

target = args.target
hosts = args.hosts
output_dir = args.out


# First, we want to initiate an nmap scan and output the results of the scan to a file. 
# General Scan Syntax = sudo nmap -sS -sU -sV {target} -p-

def ouput_dir():
    if not os.path.isdir(output_dir):
        try:
            os.makedirs(f'{output_dir}/results')
        except:
            print("Something went wrong with the creation of the output directory! Try running with sudo.")


def initial_scan(): #IDEA- break UDP scanning out into its own function which starts first, and executes asynchronously, so that UDP output does not massively slow down the primary tasks.
    if args.target: 
        sub.run([f"nmap {target} -p- -oN {output_dir}/results/quick_tcp_nmap.txt -oX {output_dir}/results/quick_tcp_nmap.xml"], shell=True) # parse XML output, but only save a standard -oN for the user
        sub.run([f"nmap {target} -p- -sU -oN {output_dir}/results/quick_udp_nmap.txt  -oX {output_dir}/results/quick_udp_nmap.xml"], shell=True)
    if args.hosts: 
        sub.run([f"nmap -iL {hosts} -p- -oN {output_dir}/results/quick_tcp_nmap.txt -oX {output_dir}/results/quick_tcp_nmap.xml"], shell=True)
        sub.run([f"nmap -iL {hosts} -p- -sU -oN {output_dir}/results/quick_udp_nmap.txt -oX {output_dir}/results/quick_udp_nmap.txt"], shell=True)


def parse_output(): # Idea: parse results into a dictionary, with the key being list-values of open tcp and udp ports  "openPorts = {'ip_addr': '127.0.0.1', 'tcp': '['21','22','80','443','8080']', 'udp': '['53','125']'}"
    open_tcp = {}
    open_udp = {}





# For each (common) port that is open, we will want to move onto the next investigative step. E.g., if p21 FTP is open, test for anonymous login
# Same for p139/445 SMB

#def open_ports(found_ports): 
    '''take a quick scan approach first, scanning all ports, then run a more comprehensive scan on those found ports to save time using:
sudo nmap -sS -sU -sV {target} {found_ports}'''



def main():
    print_ascii_art()
    ouput_dir()
    initial_scan()


if __name__ == "__main__":
    main()

